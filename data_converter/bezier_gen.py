import convert
import os
import matplotlib.pyplot as plt
import numpy as np
import bezier
from scipy.interpolate import CubicSpline

xs = []
ys = []
cubicx = []
cubicy = []

'''
For now, plots the data generated by convert.py
Later will generate bezier curves from it
'''
script_dir = os.path.dirname(__file__)
rel_path = "../data/load/thrustcurve/AeroTech_D10.eng"
#rel_path = "../data/load/thrustcurve/AeroTech_D21.rse"
#rel_path = "../data/load/thrustcurve/AeroTech_H45.edx"
#rel_path = "../data/load/thrustcurve/AeroTech_H125.txt"
abs_path = os.path.join(script_dir, rel_path) #connects the path of where the file is being run, __file__, with the relative path of the data'''
file = open(abs_path)

data = convert.converteng(file) #test
#data = convert.convertrse(file) #test
#data = convert.convertedx(file) #test
#data = convert.convertcompuroc(file) #This is the only one that doesn't work

for pair in data:
    #print(pair)
    xs.append(pair[0])

for pair in data:
    ys.append(pair[1])

plt.plot(xs, ys)
#plt.show()

cubic = CubicSpline(xs, ys, bc_type="natural")

#Cubic Spline graph
for i in range(256):
    #print(i * xs[len(xs) - 1]/256)
    cubicx.append(i * xs[len(xs) - 1]/256)
    cubicy.append(cubic(i * xs[len(xs) - 1]/256)) #this horrible mess creates 256 points within the range of the original

plt.plot(cubicx, cubicy)
#plt.show()


#Bezier graph
nodes = np.asfortranarray([xs,ys])
print(nodes)

curve1 = bezier.Curve.from_nodes(nodes)
print(curve1)

curve1.plot(num_pts=256)
plt.show()
